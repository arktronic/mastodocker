version: '3'
services:
  db:
    restart: always
    image: postgres:14-alpine
    shm_size: 256mb
    networks:
      internal_network:
        ipv4_address: 172.24.0.21
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', 'postgres']
    volumes:
      - ${POSTGRES_DATA_LOCATION}:/var/lib/postgresql/data
    environment:
      - 'POSTGRES_HOST_AUTH_METHOD=trust'

  redis:
    restart: always
    image: redis:7-alpine
    networks:
      internal_network:
        ipv4_address: 172.24.0.31
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
    volumes:
      - ${REDIS_DATA_LOCATION}:/data

  es:
    restart: always
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.4
    environment:
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m -Des.enforce.bootstrap.checks=true"
      - "xpack.license.self_generated.type=basic"
      - "xpack.security.enabled=false"
      - "xpack.watcher.enabled=false"
      - "xpack.graph.enabled=false"
      - "xpack.ml.enabled=false"
      - "bootstrap.memory_lock=true"
      - "cluster.name=es-mastodon"
      - "discovery.type=single-node"
      - "thread_pool.write.queue_size=1000"
    networks:
      external_network:
      internal_network:
        ipv4_address: 172.24.0.41
    healthcheck:
       test: ["CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1"]
    volumes:
       - ${ELASTICSEARCH_DATA_LOCATION}:/usr/share/elasticsearch/data
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    ports:
      - '9200:9200'

  web:
    image: tootsuite/mastodon:v4.0.2
    restart: always
    env_file: .env.production
    command: bash -c "rm -f /mastodon/tmp/pids/server.pid; bundle exec rails s -p 3000"
    networks:
      external_network:
      internal_network:
        ipv4_address: 172.24.0.11
    healthcheck:
      test: ['CMD-SHELL', 'wget -q --spider --proxy=off localhost:3000/health || exit 1']
    ports:
      - '3000:3000'
    depends_on:
      - db
      - redis
      - es
    volumes:
      - ${MASTODON_DATA_LOCATION}:/opt/mastodon/public/system

  streaming:
    image: tootsuite/mastodon:v4.0.2
    restart: always
    env_file: .env.production
    command: node ./streaming
    networks:
      external_network:
      internal_network:
        ipv4_address: 172.24.0.12
    healthcheck:
      test: ['CMD-SHELL', 'wget -q --spider --proxy=off localhost:4000/api/v1/streaming/health || exit 1']
    ports:
      - '4000:4000'
    depends_on:
      - db
      - redis

  sidekiq:
    image: tootsuite/mastodon:v4.0.2
    restart: always
    env_file: .env.production
    command: bundle exec sidekiq
    depends_on:
      - db
      - redis
    networks:
      external_network:
      internal_network:
        ipv4_address: 172.24.0.13
    volumes:
      - ${MASTODON_DATA_LOCATION}:/opt/mastodon/public/system
    healthcheck:
      test: ['CMD-SHELL', "ps aux | grep '[s]idekiq\ 6' || false"]

  proxy:
    image: nginx:stable
    restart: always
    depends_on:
      - web
      - streaming
    networks:
      external_network:
      internal_network:
        ipv4_address: 172.24.0.2
    ports:
      - 443:443
    volumes:
      - ${NGINX_DATA_LOCATION}:/nginx-data:ro
      - ${NGINX_DATA_LOCATION}/default.conf:/etc/nginx/conf.d/default.conf:ro

networks:
  external_network:
  internal_network:
    internal: true
    ipam:
      config:
        - subnet: 172.24.0.0/24
